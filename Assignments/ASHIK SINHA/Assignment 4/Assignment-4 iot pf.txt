#include <WiFi.h>                    // library for wifi
#include <PubSubClient.h>            // library for MQTT


void callback(char* subscribetopic , byte* payload , unsigned int payloadlength);

//------- credentials of IBM Accounts ---------

#define ORG "9gbe4w"                // IBM organisation id
#define DEVICE_TYPE "ULTASON"       // Device type mentioned in ibm watson iot platform
#define DEVICE_ID '14701'      // Device ID mentioned in ibm watson iot platform
#define TOKEN "72949WQ8jZ&@kA?QT@"  // Token
String data3;
float dist;


//---------- customise above values ---------------

char server[] = ORG '.messaging.internetofthings.ibmcloud.com';  // server name
char publishTopic[] = "iot-2/evt/Data/fmt/json";                // topic name and type of event perform and format in which data to be send
char subscribetopic[] = "iot-2/cmd/test/fmt/String";            // cmd Represent type and command is test format of strings
char authMethod[] = "use-token-auth";                           // authentication method
char token[] = TOKEN;
char clientId = "d:" ORG ":" DEVICE_TYPE ":" DEVICE_ID;         //Client id



//-------------------------------------------------------

WiFiClient wifiClient;                                  // creating instance for wificlient
PubSubClient client(server,1883,callback,wifiClient);   // calling the predefined client id by passing parameter like server id,port and wifi credential

int LED = 4;
int trig = 5;
int echo = 18;
void setup()
{

  Serial.begin(115200);
  pinMode(trig,OUTPUT);
  pinMode(echo,INPUT);
  pinMode(LED,OUTPUT);
  delay(10);
  wificonnect();
  mqttconnect();

}

void loop()             
{
  digitalWrite(trig,LOW);
  digitalWrite(trig,HIGH);
  delayMicroseconds(10);
  digitalWrite(trig,LOW);
  float dur = pulseIn(echo,HIGH);
  float dist = (dur* 0.0343)/2;
  Serial.print("Distace in cm :");
  Serial.print(dist);
  
  PublishData(dist);
  delay(1000);
  if(!client.loop())
  {
    mqttconnect();
  }
}


/* ---------------------retrieving to cloud-------------------------*/

void PublishData(float dist)
 {
   mqttconnect();                 // function call for connecting to ibm
   String object;
   if (dist < 1000)
    {
      digitalWrite(LED,HIGH);
      Serial.println("Object is closer");
      object = "Near";
    }
   else
    {
      digitalWrite(LED,LOW);
      Serial.println("Object not found");
      object = "No";
    }

    String payload = "{\"distance\":";
    payload += dist;
    payload += ",""\"object\":\"";
    payload += object;
    payload += "\"}";

    Serial.print("Sending Payload:");
    Serial.println(payload);

    if(client.publish(publishTopic,(char*) payload.c_str()))    // if data is uploaded to cloud successfully,prints publish ok else prints publish failed
      {
        Serial.println("Publish OK");   
      }
    else
      {
        Serial.println("Publish Failed");   
      }

  }

void mqttconnect()
 {
   if(client.connected())
    { 
      Serial.println("Reconnecting client to");
      Serial.println(server);
      while(!!!client.connect(clientId, authMethod, token)) 
        {
          Serial.println(".");
          delay(500);
        }

      initManagedDevice();
      Serial.println();
    }
 }

void wificonnect()                
  {
    Serial.println();
    Serial.println("Connecting to");

    WiFi.begin("Wokwi-GUEST", "",6);    //Passing wifi credentials to establish connection
    while(WiFi.status()!=WL_CONNECTED)
     {
       delay(500);
       Serial.println(".");
     }
     Serial.println("");
     Serial.println("Wifi Connected");
     Serial.println("IP address :");
     Serial.println(WiFi.localIP());
  }

void callback(char* subscribetopic,byte* payload, unsigned int payloadLength)
 {
    Serial.println("Callback invoked for topic :");
    Serial.println(subscribetopic);
    for(int i = 0;i < payloadLength; i++)
      {
         data3 += (char)payload[i];
      } 
data3 = "";

}
   